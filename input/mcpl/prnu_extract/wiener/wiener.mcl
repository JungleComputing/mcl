package prnu_extract.wiener;

module wiener;

export wiener;

import perfect;

import lib.math.complex;
import lib.math.common;
import lib.fft.fft;
import lib.util.util;


perfect void toComplex(int h, int w, Complex[h][w] output, float[h][w] input) {
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    output[i][j].real = input[i][j];
	    output[i][j].imag = 0.0;
	}
    }
}


perfect void scaleWithVariance(int h, int w, Complex[h][w] output,
	float[h][w] varianceEstimates, float variance) {
	
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    float scale = 
		variance / max(variance, varianceEstimates[i][j]);
	    output[i][j].real = output[i][j].real * scale;
	    output[i][j].imag = output[i][j].imag * scale;
	}
    }
}


perfect void multiply(int h, int w, float[h][w] output,
	float[h][w] input) {
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    output[i][j] = output[i][j] * input[i][j];
	}
    }
}


perfect void minimum(int h, int w, float[h][w] output, 
	float[h][w] input) {
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    output[i][j] = min(output[i][j], input[i][j]);
	}
    }
}


perfect void convolve(int h, int w, int filterSize, 
	float[h][w] output,
	float[h + filterSize/2*2][w + filterSize/2*2] input) {
		
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    float sum = 0.0;
	    for (int y = 0; y < filterSize; y++) {
		for (int x = 0; x < filterSize; x++) {
		    sum += input[i + x][j + y];
		}
	    }
	    output[i][j] = sum / (filterSize*filterSize);
	}
    }
}


perfect void setToZeroSide(int h, int w, int borderSize,
	main float[h + borderSize*2][w + borderSize*2] withBorder,
	int i, int j, int iDirection) {
    for (int k = 0; k < borderSize; k++) {
	if (iDirection == 1) {
	    int j2 = j + borderSize;
	    withBorder[i + k][j2] = 0.0;
	}
	else {
	    int i2 = i + borderSize;
	    withBorder[i2][j + k] = 0.0;
	}
    }
}


perfect void setToZeroCorner(int h, int w, int borderSize,
	main float[h + borderSize*2][w + borderSize*2] withBorder, 
	int i, int j) {
    for (int i2 = 0; i2 < borderSize; i2++) {
	for (int j2 = 0; j2 < borderSize; j2++) {
	    withBorder[i + i2][j + j2] = 0.0;
	}
    }
}


perfect void copyWithBorder(int h, int w, int borderSize,
	float[h + borderSize*2][w + borderSize*2] withBorder,
	float[h][w] withoutBorder) {
	
    foreach (int i in h threads) {
	foreach (int j in w threads) {
		
	    if (i == 0 && j == 0) {
		setToZeroCorner(h, w, borderSize, withBorder, i, j);
            }
	    else if (i == 0 && j == w - 1) {
            	setToZeroCorner(h, w, borderSize, withBorder, 
            		i, j + 1 + borderSize);
            }
            else if (i == h - 1 && j == 0) {
            	setToZeroCorner(h, w, borderSize, withBorder, 
            		i + 1 + borderSize, j);
            }
            else if (i == h - 1 && j == w - 1) {
            	setToZeroCorner(h, w, borderSize, withBorder, 
            		i + 1 + borderSize, j + 1 + borderSize);
            }
			
	    if (i == 0) {
            	setToZeroSide(h, w, borderSize, withBorder, i, j, 1);
            }
            else if (i == h - 1) {
            	setToZeroSide(h, w, borderSize, withBorder, 
            		i + 1 + borderSize, j, 1);
            }
                        
            if (j == 0) {
            	setToZeroSide(h, w, borderSize, withBorder, i, j, 0);
            }
            else if (j == w - 1) {
            	setToZeroSide(h, w, borderSize, withBorder, 
            		i, j + 1 + borderSize, 0);
            }

            withBorder[i + borderSize][j + borderSize] = withoutBorder[i][j];
	}
    }
}


perfect void doConvolution(int h, int w,
	float[h][w] squaredMagnitudes, float[h][w] varianceEstimates, 
	int filterSize) {
	
    float[h + (filterSize/2)*2][w + (filterSize/2)*2] squaredMagnitudesBorder;
    copyWithBorder(h, w, filterSize/2, squaredMagnitudesBorder,
	    squaredMagnitudes);
		
    float[h][w] output;
    convolve(h, w, filterSize, output, squaredMagnitudesBorder);
    minimum(h, w, varianceEstimates, output);
}


perfect void initialize(int h, int w, float[h][w] array, float value) {
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    array[i][j] = value;
	}
    }
}


perfect void computeSquaredMagnitudes(int h, int w, float[h][w] output,
	Complex[h][w] input) {
    foreach (int i in h threads) {
	foreach (int j in w threads) {
	    float real = input[i][j].real;
	    float imag = input[i][j].imag;
	    output[i][j] = real * real + imag * imag;
	}
    }
}

perfect void wiener(int h, int w, float[h][w] output, float [h][w] input) {
    Complex[h][w] complex_in as Complex[h * w] complex_in1D;
    Complex[h][w] complex_out as Complex[h * w] complex_out1D;

    toComplex(h, w, complex_in, input);

    fft(h * w, complex_out1D, complex_in1D);


    for (int i = 0; i < h; i++) {
	for (int j = 0; j < w; j++) {
	    output[i][j] = complex_out[i][j].real;
	}
    }
    
    /*
    float[h][w] squaredMagnitudes;
    float[h][w] varianceEstimates;
	
    computeSquaredMagnitudes(h, w, squaredMagnitudes, complex_out);
    initialize(h, w, varianceEstimates, MAX_FLOAT);
	
    for (int i = 3; i <= 9; i += 2) {
	doConvolution(h, w, squaredMagnitudes, varianceEstimates, i);
    }
	
    int n = h * w;
    float variance = 0.0;
    float[h][w] squared as float[h * w] squared_1D;
    square(h, w, squared, input);
    sum(h * w, variance, squared_1D);

    variance /= variance * n;
	
    scaleWithVariance(h, w, complex_in, varianceEstimates, variance);

    output as float[h * w] output_1D;

    ifft(n, complex_in1D, complex_out1D);
    */
}

