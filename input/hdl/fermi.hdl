hardware_description fermi;

specializes nvidia;

parallelism hierarchy {
    memory_space global {
	default;
    }

    memory_space constant {
	read_only;
    }

    par_group blocks {
	max_nr_units = 65000;
	
	par_unit block {
	    memory_space shared {
	    }
	
	    par_group warps {
		max_nr_units = 32;
		
		par_unit warp {
		    par_group threads {
			nr_units = 32;
		
			par_unit thread {
			    memory_space reg {
				default;
			    }
			    memory_space local {
			    }
			}
		    }
		}
	    }
	}
    }
}

device host {
}

interconnect pcie {
    connects(host, fermi.device_mem);
    latency = 1000 cycles;
    bandwidth = 8 GB/s;
}

device fermi {
    device_mem;
    ic1;
    constant_cache;
    l2_cache;
    ic2;
    smps;
}

memory device_mem {
    space(global);
    space(local);
    space(constant);
    capacity = 2 GB;
}

interconnect ic1 {
    connects(device_mem, constant_cache);
    connects(device_mem, l2_cache);
    latency = 800 cycles;
    clock_frequency = 3696 MHz;
    width = 384 bits;
}

cache constant_cache {
    space(constant);
    capacity = 64 kB;
}

cache l2_cache {
    space(global);
    space(local);
    capacity = 768 kB;
    cache_line_size = 128 B;
}

interconnect ic2 {
    connects(constant_cache, smps.smp[*]);
    connects(l2_cache, smps.smp[*]);
    latency = 20 cycles;
    bandwidth = 100 GB/s;
}

execution_group smps {
    nr_units = 16;

    execution_unit smp {
	slots(block, 8);
	slots(warp, 48);
	
	on_chip;
	l1_cache;
	regs;
	alus;
	special_units;
	load_store_units;
    }
}

memory on_chip {
    space(shared);
    capacity = 48 kB;
    nr_banks = 32;
}

cache l1_cache {
    space(global);
    space(local);
    capacity = 16 kB;
    cache_line_size = 128 B;
}


memory regs {
    space(reg);
    addressable = false;
    capacity = 32768 * 32 bit;
}

simd_group alus {
    nr_units = 32;

    slots(warp, 1);

    simd_unit alu {
	slots(thread, 1);
	
	instructions ops {
	    op((+), 1);
	}
    }
}

simd_group special_units {
    nr_units = 4;

    slots(warp, 1);

    simd_unit special_unit {
	slots(thread, 1);
	
	instructions special_ops {
	    op("log", 1);
	}
    }
}

load_store_group load_store_units {
    nr_units = 16;

    slots(warp, 1);
    
    performance_feedback("load_store_optimality");

    connects(regs, l1_cache);
    connects(regs, constant_cache);
    connects(regs, on_chip);

    load_store_unit ls_unit {
	slots(thread, 1);
	
	instructions ls_ops {
	    op("load", 1);
	    op("store", 1);
	}
    }
}
