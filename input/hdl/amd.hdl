/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

hardware_description amd

specializes gpu;

parallelism hierarchy {
    memory_space global {
		consistency = barrier;
		default;
    }

    par_group workgroups {
		max_nr_units = 65000;
	
		par_unit workgroup {
	
		    memory_space local {
				consistency = barrier;
		    }
	
		    par_group workitems {
				max_nr_units = 256;
	
				par_unit workitem {
					memory_space reg {
						consistency = full;
						default;
					}
					memory_space private {
						consistency = full;
					}
				}
		    }
		}
    }
}

device host {
}

interconnect pcie {
    connects(host, mem);
    latency = 1000 cycle;
    bandwidth = 8 GB/s;
}

device amd {
    mem;
    ic;
    cus;
}

memory mem {
    space(global);
    space(private);
    capacity = 2 GB;
}

memory on_chip {
    space(local);
    capacity = 64 kB;
}

memory regs {
	space(reg);
	capacity = 32 kB;
	addressable = false;
}

interconnect ic {
    connects(mem, cus.cu[*]);
    latency = 20 cycles;
}

execution_group cus {
    nr_units = 32;

    execution_unit cu {
		slots(workgroup, 16);
		slots(workitem, 256);

		//performance_feedback("shared_mem_parallelism");
		
		on_chip;
		ls_units;
		regs;
	
		execution_group alus {
		    nr_units = 64;
		    
		    execution_unit alu {
				slots(workitem, 1);
				
				perfect.cores.core.ops;
		    }
		}
    }
}


load_store_group ls_units {
	max_nr_units = 64;
	
	load_store_unit ls_unit {
		slots(workitem, 1);
		
		instructions ls_ops {
			op("load", 1);
			op("store", 1);
		}
	}
}

