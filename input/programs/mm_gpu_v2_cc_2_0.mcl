/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import gpu;
import nvidia;
import cc_2_0;





cc_2_0 void matmul(const int n = 512, const int m = 512, const int p = 512, 
        float[n,m] c, const float[n,p] a, const float[p,m] b) {
    const int nrElsN = 8;
    const int nrBlocksN = n / nrElsN;
    const int nrThreadsM = gpu.hierarchy.blocks.block.threads.max_nr_units;
    const int nrBlocksM = m / nrThreadsM;
    const int nrLoadIters = p / nrThreadsM;
    foreach (const int bi in nrBlocksN blocks) {
        foreach (const int bj in nrBlocksM blocks) {
            shared float[p] l_a as float[nrLoadIters][nrThreadsM] l_a2;
            a as float[n,nrLoadIters][1,nrThreadsM] a2;
            const int nrThreadsNrThreadsM = 
                    cc_2_0.hierarchy.blocks.block.warps.warp.threads.nr_units;
            const int nrWarpsNrThreadsM = nrThreadsM / (1 * 
                    nrThreadsNrThreadsM);
            foreach (const int wtj in nrWarpsNrThreadsM warps) {
                foreach (const int ttj in nrThreadsNrThreadsM threads) {
                    const int tj = wtj * (1 * nrThreadsNrThreadsM) + ttj;
                    for (local int ei = 0; ei < nrElsN; ei++) {
                        const int i = bi * nrElsN + ei;
                        for (local int l = 0; l < nrLoadIters; l++) {
                            l_a2[l][tj] = a2[i,l][0,tj];
                        }
                        barrier(shared);
                        const int j = bj * nrThreadsM + tj;
                        local float sum = 0.0;
                        for (local int k = 0; k < p; k++) {
                            sum = sum + l_a[k] * b[k,j];
                        }
                        c[i,j] = sum;
                        barrier(shared);
                    }
                }
            }
        }
    }
}

