/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import perfect;
import mic;





mic void matmul(const int n, const int m, const int p, float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {
    const int nrVectorsM = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsM = m / (1 * nrVectorsM);
    foreach (const int i in n threads) {
        foreach (const int tj in nrThreadsM threads) {
            foreach (const int vj in nrVectorsM vectors) {
                const int j = tj * (1 * nrVectorsM) + vj;
                float sum = 0.0;
                for (int k = 0; k < p; k++) {
                    sum += a[i,k] * b[k,j];
                }
                c[i,j] += sum;
            }
        }
    }
}

/*
INFO at |project://mcl/input/programs/mm_mic.mcl|(639,1,<21,41>,<21,42>): Data reuse: b[k,j] is accessed for n threads i.
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): pcie transfers 4 * (m * n) bytes from device to host
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): indexing:
  vectors:
    instructions: 
      3*n*nrThreadsM*nrVectorsM
INFO at |project://mcl/input/programs/mm_mic.mcl|(630,1,<21,32>,<21,33>): Data reuse: a[i,k] is accessed for nrVectorsM vectors vj.
INFO at |project://mcl/input/programs/mm_mic.mcl|(630,1,<21,32>,<21,33>): Data reuse: a[i,k] is accessed for nrThreadsM threads tj.
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): Arithmetic intensity: 2*n*nrThreadsM*nrVectorsM*p*(2*n*nrThreadsM*nrVectorsM*p+n*nrThreadsM*nrVectorsM)^(
-1)
INFO at |project://mcl/input/programs/mm_mic.mcl|(129,1,<11,66>,<11,67>): It may be beneficial to consider computing more than one element of c per vector.
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): Memory regs is shared by more than one thread, carefully consider the usage of memory spaces {}
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): control flow:
  host:
    instructions: 
      2
  vectors:
    instructions: 
      2*n*nrThreadsM*nrVectorsM*p
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): pcie transfers 4 * (m * p) + 4 * (n * p) + 12 bytes from host to device
INFO at |project://mcl/input/programs/mm_mic.mcl|(72,6,<11,9>,<11,15>): computation:
  vectors:
    loads: 
      dev: 2*n*nrThreadsM*nrVectorsM*p
    instructions: 
      2*n*nrThreadsM*nrVectorsM*p
    stores: 
      dev: n*nrThreadsM*nrVectorsM
      
      
Multiple elements per vector: which dimension? Both dimensions 8x8 ---> mm_mic-v1
*/