/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module blackscholes


import perfect;
import math;
import mic;
import xeon_phi;


// Cache feedback totally indicates cache misses in the vector direction. 
// First step: switch elements and vector dimension.


xeon_phi float cnd(const float d) {
    const float a1 = 0.31938153;
    const float a2 = 0 - 0.356563782;
    const float a3 = 1.781477937;
    const float a4 = 0 - 1.821255978;
    const float a5 = 1.330274429;
    const float rsqrt2pi = 0.39894228040143267793994605993438;
    const float k = 1.0 / (1.0 + 0.2316419 * fabs(d));
    const float cnd = rsqrt2pi * exp((0 - 0.5) * d * d) * (k * (a1 + k * (a2 + 
            k * (a3 + k * (a4 + k * a5)))));
    if (d > 0) return 1.0 - cnd;
    return cnd;
}


xeon_phi void blackscholes(const int size, float[size] callresult, float[size] 
        putresult, const float[size] stockprice, const float[size] optionstrike,
         const float[size] optionyears, const float riskfree, const float 
        volatility) {
    const int nrElementsPerThread = 16;
    const int nrVectorsSize = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsSize = size / (nrElementsPerThread * nrVectorsSize);
    foreach (const int ti in nrThreadsSize threads) {
        foreach (const int vi in nrVectorsSize vectors) {
            for (int ei = 0; ei < nrElementsPerThread; ei++) {
                const int i = (ti * nrElementsPerThread + ei) * nrVectorsSize + vi;
                const float s = stockprice[i];
                const float x = optionstrike[i];
                const float t = optionyears[i];
                const float r = riskfree;
                const float v = volatility;
                const float sqrtt = sqrt(t);
                const float d1 = (log(s / x) + (r + 0.5 * v * v) * t) / (v * 
                        sqrtt);
                const float d2 = d1 - v * sqrtt;
                const float cndd1 = cnd(d1);
                const float cndd2 = cnd(d2);
                const float exprt = exp(0 - r * t);
                callresult[i] = s * cndd1 - x * exprt * cndd2;
                putresult[i] = x * exprt * (1.0 - cndd2) - s * (1.0 - cndd1);
            }
        }
    }
}
/*
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): This is a cache-oriented architecture. Make sure that each access benefits from the cache(s)
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1970,10,<51,16>,<51,26>): Var callresult[i]:
  in loop ei:
    does not benefit from cache l1_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1506,11,<41,32>,<41,43>): Var optionyears[i]:
  in loop ei:
    does not benefit from cache l1_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1457,12,<40,32>,<40,44>): Var optionstrike[i]:
  in loop ei:
    does not benefit from cache l1_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1410,10,<39,32>,<39,42>): Var stockprice[i]:
  in loop ei:
    does not benefit from cache l1_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(2033,9,<52,16>,<52,25>): Var putresult[i]:
  in loop ei:
    does not benefit from cache l1_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1970,10,<51,16>,<51,26>): Var callresult[i]:
  in loop ei:
    does not benefit from cache l2_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1506,11,<41,32>,<41,43>): Var optionyears[i]:
  in loop ei:
    does not benefit from cache l2_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1457,12,<40,32>,<40,44>): Var optionstrike[i]:
  in loop ei:
    does not benefit from cache l2_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(1410,10,<39,32>,<39,42>): Var stockprice[i]:
  in loop ei:
    does not benefit from cache l2_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(2033,9,<52,16>,<52,25>): Var putresult[i]:
  in loop ei:
    does not benefit from cache l2_cache:
      16 cache line fetches
  in foreach loop vi:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(174,3,<13,15>,<13,18>): This is a cache-oriented architecture. Make sure that each access benefits from the cache(s)
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): pcie transfers 12 * size + 12 bytes from host to device
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): pcie transfers 8 * size bytes from device to host
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(174,3,<13,15>,<13,18>): pcie transfers 4 bytes from host to device
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): computation:
  vectors:
    loads: 
      main: 7*nrElementsPerThread*nrThreadsSize*nrVectorsSize
      dev: 3*nrElementsPerThread*nrThreadsSize*nrVectorsSize
    instructions: 
      69*nrElementsPerThread*nrThreadsSize*nrVectorsSize
    stores: 
      main: 7*nrElementsPerThread*nrThreadsSize*nrVectorsSize
      dev: 2*nrElementsPerThread*nrThreadsSize*nrVectorsSize
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): indexing:
  vectors:
    instructions: 
      4*nrElementsPerThread*nrThreadsSize*nrVectorsSize
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): control flow:
  host:
    instructions: 
      2
  vectors:
    instructions: 
      2*nrElementsPerThread*nrThreadsSize*nrVectorsSize
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(682,12,<28,14>,<28,26>): Arithmetic intensity: 69/19
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(174,3,<13,15>,<13,18>): computation:
  host:
    loads: 
      main: 2
    instructions: 
      22
    stores: 
      main: 2
INFO at |project://mcl/input/programs/BlackScholes-xeon_phi-v1.mcl|(174,3,<13,15>,<13,18>): Arithmetic intensity: Indeterminate

openCL.run(NDRange(262144), NDRange(16)
pre                      : avg = 3.31 ms, total = 9.94 ms, count =         3

blackscholesKernel       : avg = 2.76 ms, total = 2.76 ms, count =         1

blackscholesKernel       : avg = 2.78 ms, total = 5.56 ms, count =         2

blackscholesKernel       : avg = 2.77 ms, total =  8.3 ms, count =         3

blackscholesKernel       : avg = 2.78 ms, total = 11.1 ms, count =         4

blackscholesKernel       : avg = 2.76 ms, total = 13.8 ms, count =         5

#GFLOPS: 104.94 GFLOPS
Effective Bandwidth: 28.327 GB/s
Bandwidth: 28.327 GB/s

*/
