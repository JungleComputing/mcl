/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module histogram


import perfect;
import atomics;
import gpu;
import nvidia;





nvidia void histogram(const int nrBuckets = 256, const int m = 2048, 
		const int n = 2048, 
        int[nrBuckets] hist, const int[m,n] data) {
       
    const int blocksize = 512;
    const int nrThreadsN = nrBuckets/2;
    const int nrBlocksN = n / (1 * nrThreadsN);
    
    const int nrIters = nrBuckets / nrThreadsN;
    
    hist as int[nrIters][nrThreadsN] hist2;
    
    foreach (const int i in m / blocksize blocks) {
        foreach (const int bj in nrBlocksN blocks) {
            shared int[nrBuckets] local_hist as int[nrIters][nrThreadsN] l_hist2;
            foreach (const int tj in nrThreadsN threads) {
                l_hist2[0][tj] = 0;
                l_hist2[1][tj] = 0;
                barrier(shared);
                const int j = bj * (1 * nrThreadsN) + tj;
                for (local int k = 0; k < blocksize; k++) {
                    const int d = data[i * blocksize + k,j];
                    atomicAdd(local_hist[d], 1);
                }
                barrier(shared);
                atomicAdd(hist2[0][tj], l_hist2[0][tj]);
                atomicAdd(hist2[1][tj], l_hist2[1][tj]);
            }
        }
    }
}
