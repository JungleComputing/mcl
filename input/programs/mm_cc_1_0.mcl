/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication



import cc_1_0;



cc_1_0 void matmul(const int n = 16, const int m = 16, const int p = 16, 
        global float[n,m] c, const global float[n,p] a, const global float[p,m] 
        b) {
        
   	const int nrThreadsM = gpu.hierarchy.blocks.block.threads.max_nr_units;
    const int nrBlocksM = m / nrThreadsM;
    
    foreach (const int i in n blocks) {
    
        foreach (const int bj in nrBlocksM blocks) {
        
            const int nrThreadsNrThreadsM = 
                    cc_1_0.hierarchy.blocks.block.warps.warp.threads.nr_units;
            const int nrWarpsNrThreadsM = nrThreadsM / 
                    nrThreadsNrThreadsM;
            foreach (const int wtj in nrWarpsNrThreadsM warps) {
            
                foreach (const int ttj in nrThreadsNrThreadsM threads) {
                
                    const int tj = wtj * nrThreadsNrThreadsM + ttj;
                    const int j = bj * nrThreadsM + tj;
                    local float sum = 0.0;
                    for (local int k = 0; k < p; k++) {
                    
                        sum = sum + a[i,k] * b[k,j];
                    }
                    c[i,j] = sum;
                }
            }
        }
    }
}