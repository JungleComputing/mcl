/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import gpu;
import nvidia;


nvidia void matmul(const int n = 2048, const int m = 2048, const int p = 2048, 
		float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {
    const int nrElsN = 4;
    const int nrBlocksN = n / nrElsN;
    const int nrThreadsM = gpu.hierarchy.blocks.block.threads.max_nr_units;
    const int nrBlocksM = m / nrThreadsM;
    const int nrLoadIters = p / nrThreadsM;
    a as float[nrBlocksN,nrLoadIters][nrElsN,nrThreadsM] a2;
    c as float[nrBlocksN,nrBlocksM][nrElsN,nrThreadsM] c2;
    foreach (const int bi in nrBlocksN blocks) {
        foreach (const int bj in nrBlocksM blocks) {
            shared float[nrElsN][p] l_a as 
                    float[nrElsN][nrLoadIters][nrThreadsM] l_a2;
            foreach (const int tj in nrThreadsM threads) {
                local float[nrElsN] sums;
                for (local int ei = 0; ei < nrElsN; ei++) {
                    for (local int l = 0; l < nrLoadIters; l++) {
                        l_a2[ei][l][tj] = a2[bi,l][ei,tj];
                    }
                    sums[ei] = 0.0;
                }
                barrier(shared);
                const int j = bj * nrThreadsM + tj;
                for (local int k = 0; k < p; k++) {
                    const float bkj = b[k,j];
                    for (local int ei = 0; ei < nrElsN; ei++) {
                        sums[ei] += l_a[ei][k] * bkj;
                    }
                }
                for (local int ei = 0; ei < nrElsN; ei++) {
                    c2[bi,bj][ei,tj] += sums[ei];
                }
            }
        }
    }
}


/*
INFO at |project://mcl/input/programs/mm_nvidia.mcl|(1276,1,<32,38>,<32,39>): b[k,j] is accessed for nrBlocksN blocks bi.
INFO at |project://mcl/input/programs/mm_nvidia.mcl|(1276,1,<32,38>,<32,39>): Data reuse: b[k,j] is accessed for nrBlocksN blocks bi.
INFO at |project://mcl/input/programs/mm_nvidia.mcl|(1008,2,<25,42>,<25,44>): Data reuse: a2[bi,l][ei,tj] is accessed for nrBlocksM blocks bj.

INFO at |project://mcl/input/programs/mm_nvidia.mcl|(71,6,<8,12>,<8,18>): Memory on_chip is shared by more than one block, carefully consider the usage of memory spaces {"shared"}
INFO at |project://mcl/input/programs/mm_nvidia.mcl|(733,4,<20,59>,<20,63>): Multiple elements of l_a2 are loaded into shared memory, but there is only one store/load phase. It may be benificial to store/load in multiple phases because the memory is a scarce resource.

INFO at |project://mcl/input/programs/mm_nvidia.mcl|(88,1,<8,29>,<8,30>): An example value for n is needed for performance evaluation

INFO at |project://mcl/input/programs/mm_nvidia.mcl|(811,7,<22,48>,<22,55>): using shared memory: Try to maximize the # blocks. Now using 1 of 8 blocks
*/