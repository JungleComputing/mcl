/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module gesummv


import perfect;
import accelerator;
import gpu;


// Multiple store-load phases.


gpu void gesummv(const int n, const float[n,n] a, const float[n,n] b, const 
        float[n] x, float[n] y, const float alpha, const float beta) {
    const int nrThreadsN = gpu.hierarchy.blocks.block.threads.max_nr_units;
    const int nrBlocksN = n / (1 * nrThreadsN);
    foreach (const int bi in nrBlocksN blocks) {
    	local float[nrThreadsN] xcopy;
        foreach (const int ti in nrThreadsN threads) {
        	float sum1 = 0.0;
            float sum2 = 0.0;
            const int i = bi * (1 * nrThreadsN) + ti;
        	for (int m = 0; m < n; m += nrThreadsN) {
	        	xcopy[ti] = x[m + ti];
	        	barrier(local);
	            for (int k = 0; k < nrThreadsN; k++) {
	                sum1 = sum1 + a[i,m + k] * xcopy[k];
	                sum2 = sum2 + b[i,m + k] * xcopy[k];
	            }
	            barrier(local);
	        }
            y[i] = alpha * sum1 + beta * sum2;
        }
    }
}
/*
openCL.run(NDRange(256, 32), NDRange(32, 32)
gesummvKernel            : avg =  117 ms, total =  117 ms, count =         1

#GFLOPS: 2.2959 GFLOPS
Effective Bandwidth: 4.2785 GB/s
Bandwidth: 4.2767 GB/s

It got worse. Continue with v1.

*/
