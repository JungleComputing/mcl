/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module sparsemv


import perfect;
import mic;


// Avoid reuse of c[arow] by computing its value in a local "sum". Also avoid most of the air reuse.


mic void sparsemv(const int n, const int m, const int nz, const int[n + 1] air, 
        const int[nz] ajc, const float[nz] avalues, const float[m] b, float[n] 
        c) {
    const int nrVectorsN = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsN = n / (1 * nrVectorsN);
    foreach (const int tarow in nrThreadsN threads) {
        foreach (const int varow in nrVectorsN vectors) {
            const int arow = tarow * (1 * nrVectorsN) + varow;
            int start = air[arow];
            int end = air[arow+1];
            float sum = 0;
            for (int i = start; i < end; i++) {
                sum = sum + avalues[i] * b[ajc[i]];
            }
            c[arow] = sum;
        }
    }
}

/*
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(160,8,<11,9>,<11,17>): pcie transfers 4 * m + (4 * n + 8 * nz) + 16 bytes from host to device
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(160,8,<11,9>,<11,17>): pcie transfers 4 * n bytes from device to host
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(811,3,<23,43>,<23,46>): Data reuse: For ajc[i]:
    the loops const int varow, int i = start may have a positive data reuse ratio: (16 * end + -16 * start) / (end + -1 * start)
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(809,1,<23,41>,<23,42>): Data reuse: For b[ajc[i]]:
    the loops const int varow, int i = start may have a positive data reuse ratio: (16 * end + -16 * start) / (ajc[((i))] + 1)
    the loops const int tarow, const int varow may have a positive data reuse ratio: n / (ajc[((i))] + 1)
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(796,7,<23,28>,<23,35>): Data reuse: For avalues[i]:
    the loops const int varow, int i = start may have a positive data reuse ratio: (16 * end + -16 * start) / (end + -1 * start)
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(680,3,<20,22>,<20,25>): Data reuse: For air[arow + 1]:
    the loops const int tarow, const int varow may have a positive data reuse ratio: n / (n + 1)
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(160,8,<11,9>,<11,17>): computation:
  vectors:
    loads: 
      dev: 2*nrThreadsN*nrVectorsN*(-start+end) (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
    instructions: 
      2*nrThreadsN*nrVectorsN*(-start+end) (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
    stores: 
      dev: nrThreadsN*nrVectorsN (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(160,8,<11,9>,<11,17>): indexing:
  vectors:
    loads: 
      dev: nrThreadsN*nrVectorsN*(-start+end) (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
    instructions: 
      nrThreadsN*nrVectorsN (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
    stores: 
      dev: 0 (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(160,8,<11,9>,<11,17>): control flow:
  host:
    instructions: 
      2
  vectors:
    loads: 
      dev: 2*nrThreadsN*nrVectorsN
    instructions: 
      2*nrThreadsN*nrVectorsN*(-start+end)+3*nrThreadsN*nrVectorsN (may not be accurate: depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(529,5,<17,27>,<17,32>), depends on loop at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(471,5,<16,23>,<16,28>))
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(160,8,<11,9>,<11,17>): Arithmetic intensity: 2*nrThreadsN*nrVectorsN*(-start+end)*(2*nrThreadsN*nrVectorsN*(-start+end)+nrThreadsN*nrVectorsN)^(
-1)
INFO at |project://mcl/input/programs/sparsemv-mic-v1.mcl|(320,1,<13,8>,<13,9>): It may be beneficial to consider computing more than one element of c per vector.


openCL.run(NDRange(65536), NDRange(16)
pre                      : avg = 6.07 ms, total = 18.2 ms, count =         3

sparsemvKernel           : avg = 6.02 ms, total = 6.02 ms, count =         1

sparsemvKernel           : avg = 5.96 ms, total = 11.9 ms, count =         2

sparsemvKernel           : avg = 6.02 ms, total = 18.1 ms, count =         3

sparsemvKernel           : avg = 6.07 ms, total = 24.3 ms, count =         4

sparsemvKernel           : avg = 6.06 ms, total = 30.3 ms, count =         5

Bandwidth: 10.723 GB/s
*/

