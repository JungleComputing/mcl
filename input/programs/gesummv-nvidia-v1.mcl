/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module gesummv


import perfect;
import accelerator;
import gpu;
import nvidia;


// Maximized number of blocks per smp, by reducing number of threads per block,
// and reducing the amount of shared memory used by having multiple store-load phases.


nvidia void gesummv(const int n = 4096, const float[n,n] a, const float[n,n] b, const 
        float[n] x, float[n] y, const float alpha, const float beta) {
    const int nrThreadsN = 128;
    const int nrBlocksN = n / (1 * nrThreadsN);
    const int elementsPerIteration = 1024;
    foreach (const int bi in nrBlocksN blocks) {
        shared float[elementsPerIteration] xcopy;
        foreach (const int ti in nrThreadsN threads) {
            const int i = bi * (1 * nrThreadsN) + ti;
	        local float sum1 = 0.0;
	        local float sum2 = 0.0;
        	for (local int iter = 0; iter < n/elementsPerIteration; iter++) {
	            for (local int l = ti; l < elementsPerIteration; l += nrThreadsN) {
	                xcopy[l] = x[iter * elementsPerIteration + l];
	            }
	            barrier(shared);
	            for (local int k = 0; k < elementsPerIteration; k++) {
	                sum1 = sum1 + a[i,k + iter * elementsPerIteration] * xcopy[k];
	                sum2 = sum2 + b[i,k + iter * elementsPerIteration] * xcopy[k];
	            }
	        }
	        y[i] = alpha * sum1 + beta * sum2;
        }
    }
}


/*
INFO at |project://mcl/input/programs/gesummv-nvidia-v1.mcl|(263,7,<14,12>,<14,19>): Memory on_chip is shared by more than one block, carefully consider the usage of memory spaces {"shared"}
INFO at |project://mcl/input/programs/gesummv-nvidia-v1.mcl|(675,7,<21,44>,<21,51>): using shared memory: Try to maximize the # blocks per SMP. This depends on the number of threads, amount of shared memory and the number of registers. Now using 8 of 8 blocks
*/


/*
openCL.run(NDRange(2048, 4), NDRange(32, 4)
gesummvKernel            : avg = 72.8 ms, total = 72.8 ms, count =         1

#GFLOPS: 3.6868 GFLOPS
Effective Bandwidth: 6.8939 GB/s
Bandwidth: 6.8675 GB/s

*/
