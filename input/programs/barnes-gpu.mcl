/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

module barnes




import perfect;
import math;
import accelerator;
import gpu;










gpu void computeAcceleration(const int start, const int nCompute, const int 
        nBodies, const dev float[nBodies,3] positions, const dev 
        float[nBodies] mass, dev float[nCompute,3] accel, const float softsq) {
    const int nrThreadsNCompute = gpu.hierarchy.blocks.block.threads.
            max_nr_units;
    const int nrBlocksNCompute = nCompute / (1 * nrThreadsNCompute);
    foreach (const int bbody in nrBlocksNCompute blocks) {
        foreach (const int tbody in nrThreadsNCompute threads) {
            const int body = bbody * (1 * nrThreadsNCompute) + tbody;
            const int bodyOffset = body + start;
            if (bodyOffset < nBodies) {
                reg float acc0 = 0.0;
                reg float acc1 = 0.0;
                reg float acc2 = 0.0;
                const float pos0 = positions[bodyOffset,0];
                const float pos1 = positions[bodyOffset,1];
                const float pos2 = positions[bodyOffset,2];
                for (reg int i = 0; i < nBodies; i++) {
                    const float diff_x = positions[i,0] - pos0;
                    const float diff_y = positions[i,1] - pos1;
                    const float diff_z = positions[i,2] - pos2;
                    const float distsq = diff_x * diff_x + diff_y * diff_y + 
                            diff_z * diff_z + softsq;
                    const float factor = mass[i] / (distsq * sqrt(distsq));
                    acc0 = acc0 + diff_x * factor;
                    acc1 = acc1 + diff_y * factor;
                    acc2 = acc2 + diff_z * factor;
                }
                accel[body,0] = acc0;
                accel[body,1] = acc1;
                accel[body,2] = acc2;
            }
        }
    }
}

/*
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(98,19,<20,9>,<20,28>): pcie transfers 16 * nBodies + 16 bytes from host to device
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(98,19,<20,9>,<20,28>): pcie transfers 12 * nCompute bytes from device to host
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1029,9,<36,35>,<36,44>): Data reuse: For positions[bodyOffset,2]:
  For dimension 0:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: nCompute / (nCompute + start)
  For dimension 1:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: nCompute / 3
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(969,9,<35,35>,<35,44>): Data reuse: For positions[bodyOffset,1]:
  For dimension 0:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: nCompute / (nCompute + start)
  For dimension 1:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: nCompute / 2
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(909,9,<34,35>,<34,44>): Data reuse: For positions[bodyOffset,0]:
  For dimension 0:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: nCompute / (nCompute + start)
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(98,19,<20,9>,<20,28>): computation:
  threads:
    loads: 
      main: nBodies*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu.mcl|(736,20,<30,16>,<30,36>))
      dev: 4*nBodies*nrBlocksNCompute*nrThreadsNCompute+3*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu.mcl|(736,20,<30,16>,<30,36>))
    instructions: 
      18*nBodies*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu.mcl|(736,20,<30,16>,<30,36>))
    stores: 
      main: nBodies*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu.mcl|(736,20,<30,16>,<30,36>))
      dev: 3*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu.mcl|(736,20,<30,16>,<30,36>))
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(98,19,<20,9>,<20,28>): control flow:
  threads:
    instructions: 
      2*nBodies*nrBlocksNCompute*nrThreadsNCompute+4*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu.mcl|(736,20,<30,16>,<30,36>))
  host:
    instructions: 
      2
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(98,19,<20,9>,<20,28>): Arithmetic intensity: 18*nBodies*nrBlocksNCompute*nrThreadsNCompute*(6*nBodies*nrBlocksNCompute*nrThreadsNCompute+
6*nrBlocksNCompute*nrThreadsNCompute)^(-1)
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1475,4,<43,41>,<43,45>): mass[i] is accessed for nrThreadsNCompute threads tbody: memory space local may be leveraged
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1475,4,<43,41>,<43,45>): mass[i] is accessed for nrBlocksNCompute blocks bbody.
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1151,9,<38,41>,<38,50>): positions[i,0] is accessed for nrThreadsNCompute threads tbody: memory space local may be leveraged
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1151,9,<38,41>,<38,50>): positions[i,0] is accessed for nrBlocksNCompute blocks bbody.
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1279,9,<40,41>,<40,50>): positions[i,2] is accessed for nrThreadsNCompute threads tbody: memory space local may be leveraged
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1279,9,<40,41>,<40,50>): positions[i,2] is accessed for nrBlocksNCompute blocks bbody.
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1215,9,<39,41>,<39,50>): positions[i,1] is accessed for nrThreadsNCompute threads tbody: memory space local may be leveraged
INFO at |project://mcl/input/programs/barnes-gpu.mcl|(1215,9,<39,41>,<39,50>): positions[i,1] is accessed for nrBlocksNCompute blocks bbody.

positions and mass into local memory --> barnes-gpu-v1
*/


