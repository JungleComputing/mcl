/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module gesummv


import perfect;
import mic;


// More than one element per thread


mic void gesummv(const int n, const float[n,n] a, const float[n,n] b, const 
        float[n] x, float[n] y, const float alpha, const float beta) {
    const int nElementsPerThread = 4;
    const int nrVectorsN = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsN = n / (nElementsPerThread * nrVectorsN);
    foreach (const int ti in nrThreadsN threads) {
        foreach (const int vi in nrVectorsN vectors) {
        	for (int ei = 0; ei < nElementsPerThread; ei++) {
	            const int i = (ti * (1 * nElementsPerThread) + ei) * nrVectorsN + vi;
	            float sum1 = 0.0;
	            float sum2 = 0.0;
	            for (int k = 0; k < n; k++) {
	                sum1 = sum1 + a[i,k] * x[k];
	                sum2 = sum2 + b[i,k] * x[k];
	            }
	            y[i] = alpha * sum1 + beta * sum2;
	        }
        }
    }
}

/*

openCL.run(NDRange(2048), NDRange(16)
gesummvKernel            : avg =  387 ms, total = 1.94  s, count =         5

#GFLOPS: 0.69287 GFLOPS
Effective Bandwidth: 2.581 GB/s
Bandwidth: 1.2906 GB/s


Made it a bit worse. 


INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(850,1,<24,40>,<24,41>): Data reuse: x[k] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(850,1,<24,40>,<24,41>): Data reuse: x[k] is accessed for nrVectorsN vectors vi.
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(850,1,<24,40>,<24,41>): Data reuse: x[k] is accessed for nrThreadsN threads ti.
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(804,1,<23,40>,<23,41>): Data reuse: x[k] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(804,1,<23,40>,<23,41>): Data reuse: x[k] is accessed for nrVectorsN vectors vi.
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(804,1,<23,40>,<23,41>): Data reuse: x[k] is accessed for nrThreadsN threads ti.
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(94,7,<11,9>,<11,16>): computation:
  vectors:
    loads: 
      dev: 4*n*nElementsPerThread*nrThreadsN*nrVectorsN
    instructions: 
      4*n*nElementsPerThread*nrThreadsN*nrVectorsN+3*nElementsPerThread*nrThreadsN*nrVectorsN
    stores: 
      dev: nElementsPerThread*nrThreadsN*nrVectorsN
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(94,7,<11,9>,<11,16>): indexing:
  vectors:
    instructions: 
      5*nElementsPerThread*nrThreadsN*nrVectorsN
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(94,7,<11,9>,<11,16>): control flow:
  host:
    instructions: 
      2
  vectors:
    instructions: 
      2*n*nElementsPerThread*nrThreadsN*nrVectorsN+2*nElementsPerThread*nrThreadsN*nrVectorsN
INFO at |project://mcl/input/programs/gesummv-mic-v1.mcl|(94,7,<11,9>,<11,16>): Arithmetic intensity: (4*n*nElementsPerThread*nrThreadsN*nrVectorsN+3*nElementsPerThread*nrThreadsN*nrVectorsN)*(
4*n*nElementsPerThread*nrThreadsN*nrVectorsN+nElementsPerThread*nrThreadsN*nrVectorsN)^(
-1)




*/
