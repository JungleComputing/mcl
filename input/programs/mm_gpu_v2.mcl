/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import gpu;


gpu void matmul(const int n, const int m, const int p, float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {


	const int nrElsN = 8;
	const int nrBlocksN = n / nrElsN;

    const int nrThreadsM = gpu.hierarchy.blocks.block.threads.max_nr_units;
    const int nrBlocksM = m / nrThreadsM;
    int nrLoadIters = p / nrThreadsM;
    
    foreach (const int bi in nrBlocksN blocks) {
    
        foreach (const int bj in nrBlocksM blocks) {
        
        	local float[p] l_a as float[nrLoadIters][nrThreadsM] l_a2;
        	a as float[n, nrLoadIters][1, nrThreadsM] a2;
        
            foreach (const int tj in nrThreadsM threads) {
            
            	for (int ei = 0; ei < nrElsN; ei++) {
            		int i = bi * nrElsN + ei;
            		
	            	for (int l = 0; l < nrLoadIters; l++) {
	            		l_a2[l][tj] = a2[i, l][0, tj];
	            	}
	            	
	            	barrier(local);
	            
	                const int j = bj * nrThreadsM + tj;
	                float sum = 0.0;
	                for (int k = 0; k < p; k++) {
	                
	                    sum += l_a[k] * b[k,j];
	                }
	                c[i,j] += sum;
	                barrier(local);
	            }
            }
        }
    }
}




/*
INFO at |project://mcl/input/programs/mm_gpu_v2a.mcl|(1181,1,<40,42>,<40,43>): Data reuse: b[k,j] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/mm_gpu_v2a.mcl|(1181,1,<40,42>,<40,43>): b[k,j] is accessed inside for-loop with index ei but does not depend on it.

INFO at |project://mcl/input/programs/mm_gpu_v2a.mcl|(1181,1,<40,42>,<40,43>): Data reuse: b[k,j] is accessed for nrBlocksN blocks bi.
INFO at |project://mcl/input/programs/mm_gpu_v2a.mcl|(1181,1,<40,42>,<40,43>): b[k,j] is accessed for nrBlocksN blocks bi.

INFO at |project://mcl/input/programs/mm_gpu_v2a.mcl|(895,2,<31,29>,<31,31>): Data reuse: a2[i,l][0,tj] is accessed for nrBlocksM blocks bj.


matmulKernel             : avg =  187 ms, total =  937 ms, count =         5

#GFLOPS: 91.631 GFLOPS
Effective Bandwidth: 170.93 GB/s
Bandwidth: 0.25001 GB/s




hd7970
matmulKernel             : avg = 60.2 ms, total =  301 ms, count =         5

#GFLOPS: 285.67 GFLOPS




*/