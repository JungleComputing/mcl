/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module histogram


import perfect;
import atomics;
import gpu;
import nvidia;
import cc_2_0;





cc_2_0 void histogram(const int nrBuckets = 256, const int m = 8192, const int n = 8192, 
        int[nrBuckets] hist, const int[m,n] data) {

    const int blocksize = 512;
    const int nrThreadsN = 1024;
    const int nrBlocksN = n / (1 * nrThreadsN);
    foreach (const int i in m / blocksize blocks) {
    
        foreach (const int bj in nrBlocksN blocks) {
        
            const int nrThreadsNrThreadsN = cc_2_0.hierarchy.blocks.block.warps.
                    warp.threads.nr_units;
            const int nrWarpsNrThreadsN = nrThreadsN / (1 * 
                    nrThreadsNrThreadsN);
            shared int[nrBuckets, nrThreadsNrThreadsN] local_hist;
            local_hist as int[nrThreadsNrThreadsN * nrBuckets] lh;
            foreach (const int wtj in nrWarpsNrThreadsN warps) {           
                foreach (const int ttj in nrThreadsNrThreadsN threads) {
                    const int tj = wtj * (1 * nrThreadsNrThreadsN) + ttj;
                    for (int k = tj; k <nrThreadsNrThreadsN  * nrBuckets; k += nrThreadsN) {
                    	lh[k] = 0;
                    }
                    barrier(shared);
                    const int j = bj * (1 * nrThreadsN) + tj;
                    for (local int k = 0; k < blocksize; k++) {                    
                        const int d = data[i * blocksize + k,j];
                        atomicAdd(local_hist[d, ttj], 1);
                    }
                    barrier(shared);
                    // TODO: do a reduction into local memory first.
                    for (int k = tj; k <nrThreadsNrThreadsN  * nrBuckets; k += nrThreadsN) {
						int b = k / nrThreadsNrThreadsN;
						atomicAdd(hist[b], lh[k]);
                    }
                    barrier(shared);
                }
            }
        }
    }
}
