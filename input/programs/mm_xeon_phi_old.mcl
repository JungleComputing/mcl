/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import perfect;
import xeon_phi;



xeon_phi void matmul(const int n = 2048, const int m = 2048, const int p = 2048, float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {

    
    const int nrElsP = 16;
    const int nrBlocksP = p / nrElsP;
    
    const int nrVectorsM = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrElsM = 8;
    const int nrThreadsM = m / (nrVectorsM * nrElsM);
    
    const int nrElsN = 8;
    const int nrThreadsN = n / nrElsN;
    
    c as float[nrThreadsN, nrThreadsM][nrElsN, nrElsM][1, nrVectorsM] c2;
    a as float[nrThreadsN, nrBlocksP][nrElsN, nrElsP] a2;
    b as float[nrBlocksP, nrThreadsM][nrElsP, nrElsM][1, nrVectorsM] b2;
    
    foreach (const int ti in nrThreadsN threads) {
    
        foreach (const int tj in nrThreadsM threads) {
        
            foreach (const int vj in nrVectorsM vectors) {
            
            	for (int ei = 0; ei < nrElsN; ei++) {
            		for (int ej = 0; ej < nrElsM; ej++) {
		                float sum = 0.0;
		                for (int bk = 0; bk < nrBlocksP; bk++) {
		                	for (int ek = 0; ek < nrElsP; ek++) {
			                    sum = sum + a[ti, bk][ei, ek] * b2[bk, tj][ek, ej][0, vj];
			                }
			            }
                		c2[ti,tj][ei, ej][0, vj] = sum;
			        }
                }
            }
        }
    }
}

module matrixmultiplication


import perfect;
import xeon_phi;



xeon_phi void matmul(const int n = 2048, const int m = 2048, const int p = 2048, float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {

    const int nrVectorsM = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsM = m / (1 * nrVectorsM);
    
    c as float[n, nrThreadsM][1, nrVectorsM] c2;
    b as float[p, nrThreadsM][1, nrVectorsM] b2;
    
    foreach (const int i in n threads) {
    
        foreach (const int tj in nrThreadsM threads) {
        
            foreach (const int vj in nrVectorsM vectors) {
            
                float sum = 0.0;
                for (int k = 0; k < p; k++) {
                
                    sum = sum + a[i,k] * b2[k, tj][0, vj];
                }
                c2[i,tj][0, vj] = sum;
            }
        }
    }
}

0
0