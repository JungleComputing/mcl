/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import perfect;
import mic;





mic void matmul(const int n, const int m, const int p, float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {

    const int nrVectorsM = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsM = m / (1 * nrVectorsM);
    
    int nrIters = p / (nrThreadsM * nrVectorsM);
    
    a as float[n,nrIters][1, nrThreadsM][1, nrVectorsM] a2;
    float[p] aTemp as float[nrIters][nrThreadsM][nrVectorsM] aTemp2;
    
    foreach (const int i in n threads) {
        foreach (const int tj in nrThreadsM threads) {
            foreach (const int vj in nrVectorsM vectors) {
            	for (int l = 0; l < nrIters; l++) {
            		aTemp2[l][tj][vj] = a2[i, l][0, tj][0, vj];
            	}
            }
       }
    }
    
    foreach (const int i in n threads) {
        foreach (const int tj in nrThreadsM threads) {
            foreach (const int vj in nrVectorsM vectors) {
            
            
                const int j = tj * (1 * nrVectorsM) + vj;
                float sum = 0.0;
                for (int k = 0; k < p; k++) {
                
                    sum = sum + aTemp[k] * b[k,j];
                }
                c[i,j] = sum;
            }
        }
    }
}