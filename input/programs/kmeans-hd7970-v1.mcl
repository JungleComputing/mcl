/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

module kmeans




import perfect;
import gpu;
import amd;
import hd7970;










hd7970 void kmeans_kernel(const int npoints, const int nclusters, const int 
        nfeatures, const global float[nfeatures,npoints] points, const global 
        float[nclusters,nfeatures] clusters, global int[npoints] 
        pointsCluster) {
    const int nPointsPerThread = 16;
    const int nrThreadsNpoints = gpu.hierarchy.blocks.block.threads.
            max_nr_units;
    const int nrBlocksNpoints = (npoints + nrThreadsNpoints * nPointsPerThread 
            - 1) / (1 * nrThreadsNpoints * nPointsPerThread);
    foreach (const int bpid in nrBlocksNpoints workgroups) {
        const int nrWorkitemsNrThreadsNpoints = hd7970.hierarchy.workgroups.
                workgroup.wavefronts.wavefront.workitems.nr_units;
        const int nrWavefrontsNrThreadsNpoints = nrThreadsNpoints / (1 * 
                nrWorkitemsNrThreadsNpoints);
        foreach (const int wttpid0 in nrWavefrontsNrThreadsNpoints wavefronts) {
            foreach (const int wttpid in nrWorkitemsNrThreadsNpoints 
                    workitems) {
                const int ttpid = wttpid0 * (1 * nrWorkitemsNrThreadsNpoints * nPointsPerThread) 
                        + wttpid;
                for (reg int p = 0; p < nPointsPerThread; p++) {
                    const int pid = bpid * (1 * nrThreadsNpoints * 
                            nPointsPerThread) + p * nrWorkitemsNrThreadsNpoints + ttpid;
                    if (pid < npoints) {
                        reg int ind = 0;
                        reg float min_dist = 3.0E+38;
                        float[nfeatures] point;
                        for (reg int feature = 0; feature < nfeatures; 
                            feature++) {
                            point[feature] = points[feature, pid]; 
                        }
                        for (reg int cluster = 0; cluster < nclusters; 
                                cluster++) {
                            reg float dist = 0;
                            for (reg int feature = 0; feature < nfeatures; 
                                    feature++) {
                                const float d = point[feature] - 
                                        clusters[cluster,feature];
                                dist = dist + d * d;
                            }
                            if (dist < min_dist) {
                                min_dist = dist;
                                ind = cluster;
                            }
                        }
                        pointsCluster[pid] = ind;
                    }
                }
            }
        }
    }
}

/*
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(2591,13,<64,24>,<64,37>): Var pointsCluster[pid]:
  in loop p:
    does not benefit from cache l2_cache:
      16 cache line fetches
  in foreach loop wttpid:
    does benefit from cache l2_cache:
      4 cache line fetches
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(2254,8,<56,40>,<56,48>): Var clusters[cluster,feature]:
  in loop feature:
    may benefit from cache l2_cache:
      best case: nfeatures / 16 cache line fetches
      worst case: nfeatures cache line fetches
  in foreach loop wttpid:
    does benefit from cache l2_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1809,6,<48,45>,<48,51>): Var points[feature,pid]:
  in loop feature:
    may benefit from cache l2_cache:
      best case: nfeatures * npoints / 16 cache line fetches
      worst case: nfeatures cache line fetches
  in foreach loop wttpid:
    does benefit from cache l2_cache:
      4 cache line fetches
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(2591,13,<64,24>,<64,37>): Var pointsCluster[pid]:
  in loop p:
    does not benefit from cache l1_cache:
      16 cache line fetches
  in foreach loop wttpid:
    does benefit from cache l1_cache:
      4 cache line fetches
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(2254,8,<56,40>,<56,48>): Var clusters[cluster,feature]:
  in loop feature:
    may benefit from cache l1_cache:
      best case: nfeatures / 16 cache line fetches
      worst case: nfeatures cache line fetches
  in foreach loop wttpid:
    does benefit from cache l1_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1809,6,<48,45>,<48,51>): Var points[feature,pid]:
  in loop feature:
    may benefit from cache l1_cache:
      best case: nfeatures * npoints / 16 cache line fetches
      worst case: nfeatures cache line fetches
  in foreach loop wttpid:
    does benefit from cache l1_cache:
      4 cache line fetches
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(95,13,<20,12>,<20,25>): pcie transfers 4 * (nclusters * nfeatures) + 4 * (nfeatures * npoints) + 12 bytes from host to device
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(95,13,<20,12>,<20,25>): pcie transfers 4 * npoints bytes from device to host
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1809,6,<48,45>,<48,51>): Data reuse: For points[feature,pid]:
  For dimension 0:
    the loops const int wttpid, reg int feature = 0  have a positive data reuse ratio: 64
    the loops const int wttpid0, reg int feature = 0  have a positive data reuse ratio: 16
    the loops const int bpid, const int wttpid0 may have a positive data reuse ratio: (npoints + 16383) / 1024
    the loops const int bpid, reg int feature = 0 may have a positive data reuse ratio: (npoints + 16383) / 16384
    the loops reg int p = 0, reg int feature = 0  have a positive data reuse ratio: 16
    the loops const int wttpid, reg int p = 0  have a positive data reuse ratio: 1024
    the loops const int wttpid0, reg int p = 0  have a positive data reuse ratio: 256
    the loops const int bpid, const int wttpid may have a positive data reuse ratio: (npoints + 16383) / 256
    the loops const int wttpid0, const int wttpid  have a positive data reuse ratio: 1024
    the loops const int bpid, reg int p = 0 may have a positive data reuse ratio: (npoints + 16383) / 1024
  For dimension 1:
    the loops const int wttpid0, reg int feature = 0 may have a positive data reuse ratio: 16 * nfeatures / 15361
    the loops const int bpid, const int wttpid0 may have a positive data reuse ratio: (npoints + 16383) / (npoints + 15360) / 1024
    the loops reg int p = 0, reg int feature = 0 may have a positive data reuse ratio: 16 * nfeatures / 961
    the loops const int bpid, const int wttpid may have a positive data reuse ratio: (npoints + 16383) / (npoints + 63) / 256
    the loops const int bpid, reg int p = 0 may have a positive data reuse ratio: (npoints + 16383) / (npoints + 960) / 1024
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(95,13,<20,12>,<20,25>): computation:
  workitems:
    loads: 
      global: 0 (may not be accurate: control flow at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1491,13,<42,24>,<42,37>))
    instructions: 
      nPointsPerThread*nclusters*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints (may not be accurate: control flow at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1491,13,<42,24>,<42,37>))
    stores: 
      global: nPointsPerThread*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints (may not be accurate: control flow at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1491,13,<42,24>,<42,37>))
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(95,13,<20,12>,<20,25>): control flow:
  workitems:
    loads: 
      global: nPointsPerThread*nclusters*nfeatures*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints+nPointsPerThread*nfeatures*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints (may not be accurate: control flow at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1491,13,<42,24>,<42,37>))
    instructions: 
      5*nPointsPerThread*nclusters*nfeatures*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints+
      2*nPointsPerThread*nfeatures*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints+nPointsPerThread*nclusters*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints+
      8*nPointsPerThread*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints+
      4*nrBlocksNpoints*nrWavefrontsNrThreadsNpoints*nrWorkitemsNrThreadsNpoints (may not be accurate: control flow at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1491,13,<42,24>,<42,37>))
    stores: 
      global: 0 (may not be accurate: control flow at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(1491,13,<42,24>,<42,37>))
  host:
    instructions: 
      6
  workgroups:
    instructions: 
      2*nrBlocksNpoints
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(95,13,<20,12>,<20,25>): Arithmetic intensity: nclusters
INFO at |project://mcl/input/programs/kmeans-hd7970-v1.mcl|(95,13,<20,12>,<20,25>): Memory on_chip is shared by more than one workgroup, carefully consider the usage of memory spaces {"local"}
*/

