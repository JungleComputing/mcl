/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module gesummv


import perfect;
import mic;
import xeon_phi;



xeon_phi void gesummv(const int n, const float[n,n] a, const float[n,n] b,
        const float[n] x, float[n] y, const float alpha, const float beta) {


    const int nrElsN = 4;
    const int nrThreadsN = n / nrElsN;

    const int m = n;

    const int nrVectorsM = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrElsM = m / nrVectorsM;

    a as float[nrThreadsN, nrElsM][nrElsN, nrVectorsM] a2;
    b as float[nrThreadsN, nrElsM][nrElsN, nrVectorsM] b2;
    x as float[nrElsM][nrVectorsM] x2;
    y as float[nrThreadsN][nrElsN] y2;

    float[nrThreadsN][nrVectorsM] sum1;
    float[nrThreadsN][nrVectorsM] sum2;


    foreach (const int ti in nrThreadsN threads) {
        foreach (const int vk in nrVectorsM vectors) {

            /*
            float[nrElsM][nrVectorsM] xCopy;

            for (int ek = 0; ek < nrElsM; ek++) {
                xCopy[ek][vk] = x2[ek][vk];
            }
            */

            for (int ei = 0; ei < nrElsN; ei++) {
            	float su1 = 0;
            	float su2 = 0;
 
                for (int ek = 0; ek < nrElsM; ek++) {
                    su1 = su1 + a2[ti,ek][ei,vk] * x2[ek][vk];
                    su2 = su2 + b2[ti,ek][ei,vk] * x2[ek][vk];
                }
                sum1[ti][vk] = su1;
                sum2[ti][vk] = su2;
 				barrier(dev);               
                if (vk == 0) {
                    float s1 = 0.0;
                    float s2 = 0.0;

                    for (int vkk = 0; vkk < nrVectorsM; vkk++) {
                        s1 = s1 + sum1[ti][vkk];
                        s2 = s2 + sum2[ti][vkk];
                    }

                    y2[ti][ei] = alpha * s1 + beta * s2;
                }
            }
        }
    }
}

/*

INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(79,7,<10,14>,<10,21>): This is a cache-oriented architecture. Make sure that each access benefits from the cache(s)
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1350,4,<51,16>,<51,20>): Var sum2[ti][vk]:
  in loop ei:
    does benefit from cache l1_cache:
      1 cache line fetch
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1656,4,<59,34>,<59,38>): Var sum2[ti][vkk]:
  in loop vkk:
    may benefit from cache l1_cache:
      best case: 1 cache line fetches
      worst case: 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1314,4,<50,16>,<50,20>): Var sum1[ti][vk]:
  in loop ei:
    does benefit from cache l1_cache:
      1 cache line fetch
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1607,4,<58,34>,<58,38>): Var sum1[ti][vkk]:
  in loop vkk:
    may benefit from cache l1_cache:
      best case: 1 cache line fetches
      worst case: 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1714,2,<62,20>,<62,22>): Var y2[ti][ei]:
  in loop ei:
    may benefit from cache l1_cache:
      best case: 1 / 4 cache line fetches
      worst case: 4 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1268,2,<48,51>,<48,53>): Var x2[ek][vk]:
  in loop ek:
    does not benefit from cache l1_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1205,2,<47,51>,<47,53>): Var x2[ek][vk]:
  in loop ek:
    does not benefit from cache l1_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1249,2,<48,32>,<48,34>): Var b2[ti,ek][ei,vk]:
  in loop ek:
    does not benefit from cache l1_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1186,2,<47,32>,<47,34>): Var a2[ti,ek][ei,vk]:
  in loop ek:
    does not benefit from cache l1_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1350,4,<51,16>,<51,20>): Var sum2[ti][vk]:
  in loop ei:
    does benefit from cache l2_cache:
      1 cache line fetch
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1656,4,<59,34>,<59,38>): Var sum2[ti][vkk]:
  in loop vkk:
    may benefit from cache l2_cache:
      best case: 1 cache line fetches
      worst case: 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1314,4,<50,16>,<50,20>): Var sum1[ti][vk]:
  in loop ei:
    does benefit from cache l2_cache:
      1 cache line fetch
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1607,4,<58,34>,<58,38>): Var sum1[ti][vkk]:
  in loop vkk:
    may benefit from cache l2_cache:
      best case: 1 cache line fetches
      worst case: 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1714,2,<62,20>,<62,22>): Var y2[ti][ei]:
  in loop ei:
    may benefit from cache l2_cache:
      best case: 1 / 4 cache line fetches
      worst case: 4 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetch
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1268,2,<48,51>,<48,53>): Var x2[ek][vk]:
  in loop ek:
    does not benefit from cache l2_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1205,2,<47,51>,<47,53>): Var x2[ek][vk]:
  in loop ek:
    does not benefit from cache l2_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1249,2,<48,32>,<48,34>): Var b2[ti,ek][ei,vk]:
  in loop ek:
    does not benefit from cache l2_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1186,2,<47,32>,<47,34>): Var a2[ti,ek][ei,vk]:
  in loop ek:
    does not benefit from cache l2_cache:
      n / 16 cache line fetches
  in foreach loop vk:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(79,7,<10,14>,<10,21>): pcie transfers 4 * (n * n) + (4 * (nrElsM * (nrElsN * (nrThreadsN * nrVectorsM))) + 4 * (nrElsM * nrVectorsM)) + 12 bytes from host to device
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(79,7,<10,14>,<10,21>): pcie transfers 4 * n bytes from device to host
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1268,2,<48,51>,<48,53>): Data reuse: x2[ek][vk] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1268,2,<48,51>,<48,53>): Data reuse: x2[ek][vk] is accessed for nrThreadsN threads ti.
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1205,2,<47,51>,<47,53>): Data reuse: x2[ek][vk] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1205,2,<47,51>,<47,53>): Data reuse: x2[ek][vk] is accessed for nrThreadsN threads ti.
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(79,7,<10,14>,<10,21>): computation:
  vectors:
    loads: 
      dev: 2*nrElsN*nrThreadsN*nrVectorsM^2+4*nrElsM*nrElsN*nrThreadsN*nrVectorsM (may not be accurate: control flow at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1424,7,<53,20>,<53,27>))
    instructions: 
      2*nrElsN*nrThreadsN*nrVectorsM^2+4*nrElsM*nrElsN*nrThreadsN*nrVectorsM+3*nrElsN*nrThreadsN*nrVectorsM (may not be accurate: control flow at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1424,7,<53,20>,<53,27>))
    stores: 
      dev: 3*nrElsN*nrThreadsN*nrVectorsM (may not be accurate: control flow at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1424,7,<53,20>,<53,27>))
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(79,7,<10,14>,<10,21>): control flow:
  host:
    instructions: 
      2
  vectors:
    instructions: 
      2*nrElsN*nrThreadsN*nrVectorsM^2+2*nrElsM*nrElsN*nrThreadsN*nrVectorsM+2*nrElsN*nrThreadsN*nrVectorsM (may not be accurate: control flow at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(1424,7,<53,20>,<53,27>))
INFO at |project://mcl/input/programs/gesummv-xeon_phi-v1.mcl|(79,7,<10,14>,<10,21>): Arithmetic intensity: 1


openCL.run(NDRange(32768), NDRange(16)
pre                      : avg = 4.93 ms, total = 14.8 ms, count =         3

gesummvKernel            : avg = 4.95 ms, total = 4.95 ms, count =         1

gesummvKernel            : avg = 4.91 ms, total = 9.82 ms, count =         2

gesummvKernel            : avg = 4.91 ms, total = 14.7 ms, count =         3

gesummvKernel            : avg = 4.89 ms, total = 19.6 ms, count =         4

gesummvKernel            : avg = 4.89 ms, total = 24.5 ms, count =         5

#GFLOPS: 55.809 GFLOPS
Effective Bandwidth: 207.9 GB/s
Bandwidth: 102.27 GB/s
*/

