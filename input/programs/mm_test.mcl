/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import cc_2_0;





cc_2_0 void matmul(const int n = 32, const int m = 32, const int p = 32, global 
        float[32,32] c, const global float[32,32] a, const global float[32,32] 
        b) {
    const int nrElsN = 8;
    const int nrBlocksN = 4;
    const int nrThreadsM = 32;
    const int nrBlocksM = 1;
    const int nrThreadsNrThreadsM = 32;
    const int nrWarpsNrThreadsM = 1;
    const int nrLoadIters = 1;
    a as float[4,1][8,32] a2;
    c as float[4,1][8,32] c2;
    foreach (const int bi in 4 blocks) {
        foreach (const int bj in 1 blocks) {
            shared float[8][32] l_a;
            foreach (const int wtj in 1 warps) {
                foreach (const int ttj in 32 threads) {
                    const int tj = 32 * wtj + ttj;
                    local float[8] sums;
                    const int j = 32 * bj + (32 * wtj + ttj);
                    for (local int ei = 0; ei < 8; ei++) {
                        sums[ei] = 0.0;
                    }
                    for (local int l = 0; l < 1; l++) {
                        for (local int ei = 0; ei < 8; ei++) {
                            l_a[ei][32 * wtj + ttj] = a2[bi,l][ei,32 * wtj + 
                                    ttj];
                        }
                        barrier(shared);
                        for (local int k2 = 0; k2 < 32; k2++) {
                            const int k = 32 * l + k2;
                            const float bkj = b[32 * l + k2,32 * bj + (32 * wtj 
                                    + ttj)];
                            for (local int ei = 0; ei < 8; ei++) {
                                sums[ei] = sums[ei] + l_a[ei][k2] * bkj;
                            }
                        }
                        barrier(shared);
                    }
                    for (local int ei = 0; ei < 8; ei++) {
                        c2[bi,bj][ei,32 * wtj + ttj] = sums[ei];
                    }
                }
            }
        }
    }
}

