/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module gesummv


import perfect;
import mic;


// Try reusing x.


mic void gesummv(const int n, const float[n,n] a, const float[n,n] b, const 
        float[n] x, float[n] y, const float alpha, const float beta) {
    const int nElementsPerThread = 4;
    const int nrVectorsN = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsN = n / (nElementsPerThread * nrVectorsN);
    foreach (const int ti in nrThreadsN threads) {
        foreach (const int vi in nrVectorsN vectors) {
        	float[n] xCopy;
        	for (int k = 0; k < n; k++) {
        		xCopy[k] = x[k];
        	}
        	for (int ei = 0; ei < nElementsPerThread; ei++) {
	            const int i = (ti * (1 * nElementsPerThread) + ei) * nrVectorsN + vi;
	            float sum1 = 0.0;
	            float sum2 = 0.0;
	            for (int k = 0; k < n; k++) {
	                sum1 = sum1 + a[i,k] * xCopy[k];
	                sum2 = sum2 + b[i,k] * xCopy[k];
	            }
	            y[i] = alpha * sum1 + beta * sum2;
	        }
        }
    }
}

/*
openCL.run(NDRange(2048), NDRange(16)
pre                      : avg =  393 ms, total = 1.18  s, count =         3

gesummvKernel            : avg =  393 ms, total =  393 ms, count =         1

gesummvKernel            : avg =  393 ms, total =  786 ms, count =         2

gesummvKernel            : avg =  393 ms, total = 1.18  s, count =         3

gesummvKernel            : avg =  393 ms, total = 1.57  s, count =         4

gesummvKernel            : avg =  393 ms, total = 1.96  s, count =         5

#GFLOPS: 0.68365 GFLOPS
Effective Bandwidth: 2.5466 GB/s
Bandwidth: 1.2734 GB/s

No difference.



INFO at |project://mcl/input/programs/gesummv-mic-v2.mcl|(938,5,<28,40>,<28,45>): Data reuse: xCopy[k] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/gesummv-mic-v2.mcl|(888,5,<27,40>,<27,45>): Data reuse: xCopy[k] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/gesummv-mic-v2.mcl|(584,1,<20,21>,<20,22>): Data reuse: x[k] is accessed for nrVectorsN vectors vi.
INFO at |project://mcl/input/programs/gesummv-mic-v2.mcl|(584,1,<20,21>,<20,22>): Data reuse: x[k] is accessed for nrThreadsN threads ti.









*/
