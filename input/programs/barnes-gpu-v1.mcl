module barnes




import perfect;
import math;
import accelerator;
import gpu;

// Copy positions and mass into local memory.

gpu void computeAcceleration(const int start, const int nCompute, const int 
        nBodies, const dev float[nBodies,3] positions, const dev float[nBodies] 
        mass, dev float[nCompute,3] accel, const float softsq) {
    const int nrThreadsNCompute = gpu.hierarchy.blocks.block.threads.
            max_nr_units;
	const int nrBlocksNCompute = (nCompute + nrThreadsNCompute - 1) / (1 * nrThreadsNCompute);
    foreach (const int bbody in nrBlocksNCompute blocks) {
    	local float[nrThreadsNCompute] xcopy;
    	local float[nrThreadsNCompute] ycopy;
    	local float[nrThreadsNCompute] zcopy;
    	local float[nrThreadsNCompute] mcopy;
        foreach (const int tbody in nrThreadsNCompute threads) {   	
            const int body = bbody * (1 * nrThreadsNCompute) + tbody;
            const int bodyOffset = body + start;
            if (bodyOffset < nBodies) {
	            reg float acc0 = 0.0;
	            reg float acc1 = 0.0;
	            reg float acc2 = 0.0;
	            const float pos0 = positions[bodyOffset,0];
	            const float pos1 = positions[bodyOffset,1];
	            const float pos2 = positions[bodyOffset,2];
	            
	            const int l = (nBodies / nrThreadsNCompute) * nrThreadsNCompute;
                for (reg int k = 0; k < l; k += nrThreadsNCompute) {

	            	xcopy[tbody] = positions[k+tbody,0];
	            	ycopy[tbody] = positions[k+tbody,1];
	            	zcopy[tbody] = positions[k+tbody,2];
	            	mcopy[tbody] = mass[k+tbody];
			
		        	barrier(local);
		            
			        for (reg int i = 0; i < nrThreadsNCompute; i++) {
			            const float diff_x = xcopy[i] - pos0;	// 1 FLOP
			            const float diff_y = ycopy[i] - pos1;	// 1 FLOP
			            const float diff_z = zcopy[i] - pos2;	// 1 FLOP
			            const float distsq = diff_x * diff_x + diff_y * diff_y + diff_z 
			                        * diff_z + softsq;					// 6 FLOP
			            const float factor = mcopy[i] / (distsq * sqrt(distsq));	// 3 FLOP
			            acc0 = acc0 + diff_x * factor;				// 1 FLOP
			            acc1 = acc1 + diff_y * factor;				// 1 FLOP
			            acc2 = acc2 + diff_z * factor;				// 1 FLOP
			            // 18 FLOP
			        }
			        barrier(local);
		    	}
		    	
		    	if (l < nBodies) {
                   	const int amount = nBodies - l;
 
	                if (tbody < amount) {
	                    xcopy[tbody] = positions[l + tbody,0];
	                    ycopy[tbody] = positions[l + tbody,1];
	                    zcopy[tbody] = positions[l + tbody,2];
	                    mcopy[tbody] = mass[l + tbody];
	                }
	                barrier(local);
	                for (reg int i = 0; i < amount; i++) {
	                    const float diff_x = xcopy[i] - pos0;
	                    const float diff_y = ycopy[i] - pos1;
	                    const float diff_z = zcopy[i] - pos2;
	                    const float distsq = diff_x * diff_x + diff_y * 
	                                    diff_y + diff_z * diff_z + softsq;
	                    const float factor = mcopy[i] / (distsq * 
	                                    sqrt(distsq));
	                    acc0 = acc0 + diff_x * factor;
	                    acc1 = acc1 + diff_y * factor;
	                    acc2 = acc2 + diff_z * factor;
	                }
	                barrier(local);
	            }
		    	
		        // nBodies*18 FLOP
	            accel[body,0] = acc0;
	            accel[body,1] = acc1;
	            accel[body,2] = acc2;
        	}
        }
    }
    // nCompute * nBodies * 18 FLOP
}

/*
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(136,19,<13,9>,<13,28>): pcie transfers 16 * nBodies + 16 bytes from host to device
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(136,19,<13,9>,<13,28>): pcie transfers 12 * nCompute bytes from device to host
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(3231,5,<76,42>,<76,47>): Data reuse: For mcopy[i]: 
    the loops reg int i = 0  have a positive data reuse ratio: 0
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(3030,5,<73,42>,<73,47>): Data reuse: For zcopy[i]: 
    the loops reg int i = 0  have a positive data reuse ratio: 0
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2971,5,<72,42>,<72,47>): Data reuse: For ycopy[i]: 
    the loops reg int i = 0  have a positive data reuse ratio: 0
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2912,5,<71,42>,<71,47>): Data reuse: For xcopy[i]: 
    the loops reg int i = 0  have a positive data reuse ratio: 0
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(1248,9,<33,32>,<33,41>): Data reuse: For positions[bodyOffset,2]:
  For dimension 0:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: (nCompute + 1023) / (nCompute + start + 1023)
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(1191,9,<32,32>,<32,41>): Data reuse: For positions[bodyOffset,1]:
  For dimension 0:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: (nCompute + 1023) / (nCompute + start + 1023)
  For dimension 1:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: (nCompute + 1023) / 2
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(1134,9,<31,32>,<31,41>): Data reuse: For positions[bodyOffset,0]:
  For dimension 0:
    the loops const int bbody, const int tbody may have a positive data reuse ratio: (nCompute + 1023) / (nCompute + start + 1023)
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(136,19,<13,9>,<13,28>): computation:
  threads:
    loads: 
      local: 4*l*nrBlocksNCompute*nrThreadsNCompute+4*amount*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2511,14,<63,21>,<63,35>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
      main: l*nrBlocksNCompute*nrThreadsNCompute+amount*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
      dev: 7*nrBlocksNCompute*nrThreadsNCompute+4*l*nrBlocksNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2511,14,<63,21>,<63,35>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
    instructions: 
      18*l*nrBlocksNCompute*nrThreadsNCompute+18*amount*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2511,14,<63,21>,<63,35>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
    stores: 
      local: 4*nrBlocksNCompute*nrThreadsNCompute+4*l*nrBlocksNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2511,14,<63,21>,<63,35>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
      main: l*nrBlocksNCompute*nrThreadsNCompute+amount*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
      dev: 3*nrBlocksNCompute*nrThreadsNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2511,14,<63,21>,<63,35>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(136,19,<13,9>,<13,28>): indexing:
  threads:
    instructions: 
      4*nrBlocksNCompute*nrThreadsNCompute+4*l*nrBlocksNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2511,14,<63,21>,<63,35>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(136,19,<13,9>,<13,28>): control flow:
  threads:
    instructions: 
      2*l*nrBlocksNCompute*nrThreadsNCompute+2*amount*nrBlocksNCompute*nrThreadsNCompute+
      7*nrBlocksNCompute*nrThreadsNCompute+2*l*nrBlocksNCompute (may not be accurate: control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(2421,11,<60,11>,<60,22>), control flow at |project://mcl/input/programs/barnes-gpu-v1.mcl|(973,20,<27,16>,<27,36>))
  host:
    instructions: 
      4
INFO at |project://mcl/input/programs/barnes-gpu-v1.mcl|(136,19,<13,9>,<13,28>): Arithmetic intensity: (18*l*nrBlocksNCompute*nrThreadsNCompute+18*amount*nrBlocksNCompute*nrThreadsNCompute)*(
6*l*nrBlocksNCompute*nrThreadsNCompute+6*amount*nrBlocksNCompute*nrThreadsNCompute+
14*nrBlocksNCompute*nrThreadsNCompute+8*l*nrBlocksNCompute)^(-1)
*/
