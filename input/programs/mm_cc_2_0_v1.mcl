/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication

import cc_2_0;


cc_2_0 void matmul(const int n = 2048, const int m = 2048, const int p = 2048, 
        float[n,m] c, const float[n,p] a, const float[p,m] b) {
        
    const int nrElsN = 16;
    const int nrBlocksN = n / nrElsN;	// 128
    
    const int nrThreadsM = 128;
    const int nrBlocksM = m / nrThreadsM;	// 16
    const int nrThreadsNrThreadsM = 
            cc_2_0.hierarchy.blocks.block.warps.warp.threads.nr_units;	// 32
    const int nrWarpsNrThreadsM = nrThreadsM / (1 *  nrThreadsNrThreadsM);	// 4
    
    const int nrLoadIters = p / nrThreadsM;	// 16
    
    a as float[nrBlocksN,nrLoadIters][nrElsN,nrThreadsM] a2;
    c as float[nrBlocksN,nrBlocksM][nrElsN,nrThreadsM] c2;
    
    foreach (const int bi in nrBlocksN blocks) {	// 128
        foreach (const int bj in nrBlocksM blocks) {	// 16
        
            shared float[nrElsN][nrThreadsM] l_a;
            
            foreach (const int wtj in nrWarpsNrThreadsM warps) {	// 4
                foreach (const int ttj in nrThreadsNrThreadsM threads) { // 32
                    const int tj = wtj * (1 * nrThreadsNrThreadsM) + ttj;
                    
                    local float[nrElsN] sums;
                    
                    const int j = bj * nrThreadsM + tj;
                    
                    for (local int ei = 0; ei < nrElsN; ei++) {
                        sums[ei] = 0.0;
                    }
                    
                    for (local int l = 0; l < nrLoadIters; l++) {
                        for (local int ei = 0; ei < nrElsN; ei++) {
                            l_a[ei][tj] = a2[bi,l][ei,tj];
                        }
                        
                        barrier(shared);
                        
                        for (local int k2 = 0; k2 < p / nrLoadIters; k2++) {
                            const int k = l * p / nrLoadIters + k2;
                            const float bkj = b[k,j];
                            for (local int ei = 0; ei < nrElsN; ei++) {
                                sums[ei] += l_a[ei][k2] * bkj;
                            }
                        }
                        barrier(shared);
                    }
                    
                    for (local int ei = 0; ei < nrElsN; ei++) {
                        c2[bi,bj][ei,tj] += sums[ei];
                    }
                }
            }
        }
    }
}


/* increased the number of elements per thread to increase the reuse of b[k, j] 



matmulKernel             : avg = 30.4 ms, total =  152 ms, count =         5

#GFLOPS: 564.43 GFLOPS
Effective Bandwidth: 70.329 GB/s
Bandwidth: 1.54 GB/s


*/
