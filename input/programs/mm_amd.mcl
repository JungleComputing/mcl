module matrixmultiplication




import gpu;
import amd;










amd void matmul(const int n, const int m, const int p, global float[n,m] c, 
        const global float[n,p] a, const global float[p,m] b) {
    const int nrElsN = 4;
    const int nrBlocksN = n / nrElsN;
    const int nrThreadsM = gpu.hierarchy.blocks.block.threads.max_nr_units;
    const int nrBlocksM = m / nrThreadsM;
    const int nrLoadIters = p / nrThreadsM;
    a as float[nrBlocksN,nrLoadIters][nrElsN,nrThreadsM] a2;
    c as float[nrBlocksN,nrBlocksM][nrElsN,nrThreadsM] c2;
    foreach (const int bi in nrBlocksN workgroups) {
        foreach (const int bj in nrBlocksM workgroups) {
            local float[nrElsN][p] l_a as 
                    float[nrElsN][nrLoadIters][nrThreadsM] l_a2;
            foreach (const int tj in nrThreadsM workitems) {
                reg float[nrElsN] sums;
                for (reg int ei = 0; ei < nrElsN; ei++) {
                    for (reg int l = 0; l < nrLoadIters; l++) {
                        l_a2[ei][l][tj] = a2[bi,l][ei,tj];
                    }
                    sums[ei] = 0.0;
                }
                barrier(local);
                const int j = bj * nrThreadsM + tj;
                for (reg int k = 0; k < p; k++) {
                    const float bkj = b[k,j];
                    for (reg int ei = 0; ei < nrElsN; ei++) {
                        sums[ei] += l_a[ei][k] * bkj;
                    }
                }
                for (reg int ei = 0; ei < nrElsN; ei++) {
                    c2[bi,bj][ei,tj] += sums[ei];
                }
            }
        }
    }
}



