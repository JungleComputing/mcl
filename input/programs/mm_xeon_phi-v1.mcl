/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module matrixmultiplication


import perfect;
import mic;
import xeon_phi;





xeon_phi void matmul(const int n, const int m, const int p, float[n,m] c, const 
        float[n,p] a, const float[p,m] b) {
    const int nrElsM = 1;
    const int nrVectorsM = mic.hierarchy.threads.thread.vectors.nr_units;
    const int nrThreadsM = m / (nrElsM * nrVectorsM);
    const int nrElsN = 32;
    const int nrThreadsN = n / nrElsN;
    c as float[nrThreadsN,nrThreadsM][nrElsN,nrElsM][1,nrVectorsM] c2;
    a as float[nrThreadsN,p][nrElsN,1] a2;
    b as float[p,nrThreadsM][1,nrElsM][1,nrVectorsM] b2;
    foreach (const int ti in nrThreadsN threads) {
        foreach (const int tj in nrThreadsM threads) {
            foreach (const int vj in nrVectorsM vectors) {
                for (int ej = 0; ej < nrElsM; ej++) {
                    dev float[p] bTemp;
                    for (int k = 0; k < p; k++) {
                        bTemp[k] = b2[k,tj][0, ej][0,vj];
                    }
	                for (int ei = 0; ei < nrElsN; ei++) {
                        float sum = 0.0;
                        for (int k = 0; k < p; k++) {
                            sum += a2[ti,k][ei,0] * bTemp[k];
                        }
                        c2[ti,tj][ei,ej][0,vj] += sum;
                    }
                }
            }
        }
    }
}

/*


INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1175,2,<33,40>,<33,42>): Data reuse: a2[ti,k][ei,0] is accessed for nrThreadsM threads tj.
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1175,2,<33,40>,<33,42>): Data reuse: a2[ti,k][ei,0] is accessed for nrVectorsM vectors vj.
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1192,5,<33,57>,<33,62>): Data reuse: bTemp[k] is accessed inside for-loop with index ei but does not depend on it.
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(940,2,<28,35>,<28,37>): Data reuse: b2[k,tj][0,ej][0,vj] is accessed for nrThreadsN threads ti.
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1175,2,<33,40>,<33,42>): Data reuse: a2[ti,k][ei,0] is accessed inside for-loop with index ej but does not depend on it.


INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(848,5,<26,33>,<26,38>): for declaration bTemp with size 4 * p bytes, if possible, try to adjust the size in relation to:
  for cache l1_cache:
    the capacity: 32 kB
    the cache line size: 64 B
  for cache l2_cache:
    the capacity: 512 kB
    the cache line size: 64 B

INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1252,2,<35,24>,<35,26>): Var c2[ti,tj][ei,ej][0,vj]:
  in loop ei:
    may benefit from cache l2_cache:
      best case: 2 * m cache line fetches
      worst case: 32 cache line fetches
  in foreach loop vj:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1175,2,<33,40>,<33,42>): Var a2[ti,k][ei,0]:
  in loop k:
    may benefit from cache l2_cache:
      best case: p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1175,2,<33,40>,<33,42>): Var a2[ti,k][ei,0]:
  in loop k:
    may benefit from cache l1_cache:
      best case: p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(929,5,<28,24>,<28,29>): Var bTemp[k]:
  in loop k:
    may benefit from cache l1_cache:
      best case: p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1192,5,<33,57>,<33,62>): Var bTemp[k]:
  in loop k:
    may benefit from cache l1_cache:
      best case: p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(940,2,<28,35>,<28,37>): Var b2[k,tj][0,ej][0,vj]:
  in loop k:
    may benefit from cache l1_cache:
      best case: m * p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l1_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1192,5,<33,57>,<33,62>): Var bTemp[k]:
  in loop k:
    may benefit from cache l2_cache:
      best case: p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(940,2,<28,35>,<28,37>): Var b2[k,tj][0,ej][0,vj]:
  in loop k:
    may benefit from cache l2_cache:
      best case: m * p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(929,5,<28,24>,<28,29>): Var bTemp[k]:
  in loop k:
    may benefit from cache l2_cache:
      best case: p / 16 cache line fetches
      worst case: p cache line fetches
  in foreach loop vj:
    does benefit from cache l2_cache:
      1 cache line fetches
INFO at |project://mcl/input/programs/mm_xeon_phi-v1.mcl|(1252,2,<35,24>,<35,26>): Var c2[ti,tj][ei,ej][0,vj]:
  in loop ei:
    may benefit from cache l1_cache:
      best case: 2 * m cache line fetches
      worst case: 32 cache line fetches
  in foreach loop vj:
    does benefit from cache l1_cache:
      1 cache line fetches


Two paths to go: changing the size of b or focus on c. 

At this stage adjusting c is easier because we have to load c in steps, which 
	means that we have to initialize c.

All variables do benefit somehow from the cache, except c. 
Let's try to change that in  ----> mm_xeon_phi-v2



matmulKernel             : avg =  196 ms, total =  978 ms, count =         5

#GFLOPS: 87.79 GFLOPS
Effective Bandwidth: 337.34 GB/s
Bandwidth: 0.23953 GB/s





*/