/*
 * Copyright 2014 Pieter Hijma
 *
 * This file is part of MCL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



module histogram

import perfect;
import atomics;

perfect void histogram(int nrBuckets, int m, int n, 
	int[nrBuckets] hist, int[m, n] data) {
	foreach (int i in m threads) {
		foreach (int j in n threads) {
			int d = data[i, j];
			atomicAdd(hist[d], 1);
		}
	}
}

/*
      
INFO at |project://mcl/input/programs/histogram.mcl|(64,9,<6,13>,<6,22>): indexing:
  threads:
    loads: 
      main: m*n
INFO at |project://mcl/input/programs/histogram.mcl|(64,9,<6,13>,<6,22>): Arithmetic intensity: 1/2
INFO at |project://mcl/input/programs/histogram.mcl|(64,9,<6,13>,<6,22>): computation:
  threads:
    loads: 
      main: m*n
    instructions: 
      m*n
    stores: 
      main: m*n
INFO at |project://mcl/input/programs/histogram.mcl|(245,4,<11,13>,<11,17>): Data reuse: For hist[d]:
    the loops const int i, const int j may have a positive data reuse ratio: m * n / (d + 1)
      
      
openCL.run(NDRange(512, 524288), NDRange(32, 32)
histogramKernel          : avg =  144 ms, total =  144 ms, count =         1

#GFLOPS: 1.8632 GFLOPS
Effective Bandwidth: 6.9408 GB/s
Bandwidth: 6.9408 GB/s



Xeon Phi

histogramKernel          : avg = 2.83  s, total = 14.2  s, count =         5

#GFLOPS: 0.094689 GFLOPS
Effective Bandwidth: 0 GB/s
Bandwidth: 0.35275 GB/s


*/