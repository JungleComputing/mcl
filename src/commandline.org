#+name: license-preamble
#+begin_src lisp :exports none 
;;;; A system for programming many-cores on multiple levels of abstraction.
;;;; Copyright (C) 2018 Pieter Hijma

;;;; This program is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation, either version 3 of the License, or
;;;; (at your option) any later version.

;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.

;;;; You should have received a copy of the GNU General Public License
;;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+end_src

#+property: header-args :comments link :tangle-mode (identity #o400) :results output silent :mkdirp yes

* Commandline

This section describes the commandline interface to ~mcl~.  

** The package
   :PROPERTIES:
   :header-args+: :package ":cl-user"
   :header-args+: :tangle "system/commandline/packages.lisp"
   :END:

#+begin_src lisp :noweb yes :exports none
<<license-preamble>>

(in-package :cl-user)
#+end_src


#+begin_src lisp
(defpackage :mcl-commandline
  (:use :cl :clon :clon-completion :mcl :errors)
  (:import-from :cl-fad :list-directory :pathname-as-directory)
  (:import-from :alexandria :read-file-into-string)
  (:export :main))
#+end_src

** Defining the commandline arguments
   :PROPERTIES:
   :header-args+: :package ":mcl-commandline"
   :header-args+: :tangle "system/commandline/commandline.lisp"
   :END:

*** Defining the commands and flags

#+begin_src lisp :exports none :noweb yes
<<license-preamble>>

(in-package :mcl-commandline)
#+end_src

#+begin_src lisp
(defcommand "list-targets"
    (clon:defsynopsis (:make-default nil)
      (text :contents "List the compilation targets.")
      (flag :short-name "h"
            :description "Print this help and exit.")))

(defcommand "list-hwd"
    (clon:defsynopsis (:make-default nil)
      (text :contents "List the available hardware descriptions.")
      (flag :short-name "h"
            :description "Print this help and exit.")))

(defcommand "gen-cpp"
  (clon:defsynopsis (:make-default nil :postfix "FILE") 
      (text :contents "Generate C++ code.")
      (flag :short-name "h" :long-name "help"
	    :description "Print this help and exit.")
      
      (stropt :short-name "t" :long-name "target"
                      :argument-name "TARGET" 
                      :description "Create C++ code for target TARGET.")
      (stropt :short-name "o"
              :argument-name "OUTPUT-DIR" :env-var "MCL_OUTPUT_DIR"
              :description "The directory where the files be created.")
      (strlist :short-name "e" :long-name "entry-funcs"
                      :argument-name "ENTRY-FUNCS"
                      :description
                      "Create C++ code with entry functions ENTRY-FUNCS.")))

(defcommand "gen-cashmere"
    (clon:defsynopsis (:make-default nil :postfix "MCL-FILE...") 
        (text :contents "Generate Cashmere code.")
      (flag :short-name "h"
	    :description "Print this help and exit.")
      (strlist :short-name "t"
               :argument-name "TARGETS" :argument-type :required
               :description "Create Cashmere code for targets TARGETS.")
      (stropt :short-name "o"
              :argument-name "OUTPUT-DIR" :env-var "MCL_OUTPUT_DIR"
              :description "The directory where the files be created.")))

(defcommand "translate"
    (clon:defsynopsis (:make-default nil :postfix "MCL-FILE")
      (text :contents "Translate to a lower-level hardware description.")
      (flag :short-name "h"
            :description "Print this help and exit")
      (stropt :short-name "hwd"
               :argument-name "HARDWARE-DESCRIPTION" :argument-type :required
               :description (format nil "~a~a" "Translate to hardware "
                                    "description HARDWARE-DESCRIPTION"))))

(defcommand "print-ast-json"
    (clon:defsynopsis (:make-default nil :postfix "MCL-FILE")
      (text :contents "Print the AST in JSON format.")
      (flag :short-name "h"
            :description "Print this help and exit")))
#+end_src

*** Defining the main synopsis

#+begin_src lisp
(def-main-synopsis
  (flag :short-name "h"
	:description "Print this help and exit.")
  (lispobj :short-name "l" :argument-name "LOG-LEVEL"
           :argument-type :required :typespec 'integer
           :description "Set the log-level to LOG-LEVEL" :default-value 0)
  (flag :short-name "v" :long-name "version"
	:description "Print the version number."))
#+end_src

*** Defining the completions

#+begin_src lisp
(def-main-completions
  ("-l" "0 1 2 3"))

(def-command-completions "translate"
  ("-hwd" "$(mcl list-hwd)"))
#+end_src


*** Defining the functions for the commands

The command ~list-targets~ shows a list of targets separated by a space.  The
targets are extracted from the ~codegen~ directory.

#+begin_src lisp
(def-command-func "list-targets"
  (cond ((clon:getopt :short-name "h")
         (clon:help))
        (t
         (format t "~{~a~^ ~}~%" (get-targets)))))

(defun get-targets ()
  (get-filenames-directory "input/codegen/"))
#+end_src

The command ~list-hwd~ shows a list of hardware-descriptions.  The
hardware-descriptions are extracted from the ~hdl~ directory.

#+begin_src lisp
(def-command-func "list-hwd"
  (cond ((clon:getopt :short-name "h")
         (clon:help))
        (t
         (format t "~{~a~^ ~}~%" (get-hardware-descriptions)))))

(defun get-hardware-descriptions ()
  (get-filenames-directory "input/hdl/"))
#+end_src

#+begin_src lisp
(def-command-func "gen-cpp" 
  (cond ((clon:getopt :short-name "h")
         (clon:help))
        (t
         (let ((target (clon:getopt :short-name "t"))
               (entry-funcs (clon:getopt :short-name "e"))
	       (output-dir (clon:getopt :short-name "o"))
               (file (clon:remainder)))
           (unless target
             (exit-with "Need to specify a target."))
           (unless entry-funcs
             (exit-with "Need to specify one or more entry functions."))
           (unless (and file (eql (length file) 1))
             (exit-with "Need to specify an MCL file"))
           (let ((file (first file)))
             (generate-code file target entry-funcs output-dir))))))
#+end_src


#+begin_src lisp
(def-command-func "gen-cashmere"
  (cond ((clon:getopt :short-name "h")
         (clon:help))
        (t
         (let ((targets (clon:getopt :short-name "t"))
               (output-dir (clon:getopt :short-name "o"))
               (input-files (clon:remainder)))
           (unless targets
             (exit-with "Need to specify one or more target."))
           (unless input-files
             (exit-with "Need to specify one or more files."))
           (unless output-dir
             (exit-with "Need to specify an output directory."))
           (generate-cashmere-code input-files targets output-dir)))))
#+end_src


#+begin_src lisp
(def-command-func "translate"
  (cond ((clon:getopt :short-name "h")
         (clon:help))
        (t
         (let ((hwd (clon:getopt :short-name "hwd"))
               (input-file (clon:remainder)))
           (unless hwd
             (exit-with "Need to specify a hardware description."))
           (if (= (length input-file) 1)
               (format t "~a~%" (translate (first input-file) hwd))
               (exit-with "Need to specify an MCL file."))))))
#+end_src


#+begin_src lisp
(def-command-func "print-ast-json"
  (cond ((clon:getopt :short-name "h")
         (clon:help))
        (t
         (let ((input-file (clon:remainder)))
           (if (= (length input-file) 1)
	       (format t "~a~%" (print-ast-json (first input-file)))
               (exit-with "Need to specify an MCL file."))))))
#+end_src


#+begin_src lisp
(defun main ()
  "Entry point for the standalone application."
  (clon:make-context)
  (handler-case
      (progn 
        (logging:initialize-logging)
        (logging:set-level (clon:getopt :short-name "l"))
        (cond ((clon:getopt :short-name "h")
               (clon:help))
	      ((clon:getopt :short-name "v")
	       (print-version))
              (t
               (unless (clon:remainder)
                 (exit-with "Missing command."))
               (dispatch)))
        (clon:exit))
    (mcl-error (e) (report-mcl-error e))))

(defgeneric report-mcl-error (error))

(defmethod report-mcl-error ((e mcl-error))
  (with-slots (loc text) e
    (if loc (print-mcl-error-with-loc loc text)
	(format t "~a~%" text))
    (clon:exit 1)))

(defun print-mcl-error-with-loc (loc text)
  (destructuring-bind ((start-position . end-position) filename) loc
    (if filename
	(print-mcl-error-with-file start-position end-position filename text)
	(format t "between positions ~a and ~a~%" start-position end-position))))

(defun safe-index (index string)
  (min (max index 0) (length string)))

(defun find-newline (string end)
  (let* ((end (safe-index end string))
	 (position (position #\Newline string :start 0 :end end :from-end t)))
    (if position (1+ position) 0)))


(defun print-mcl-error-with-file (start-position end-position filename message)
  (let* ((file-as-string (read-file-into-string filename))
	 (line (1+ (count #\Newline file-as-string :end start-position)))
	 (column (- start-position (find-newline file-as-string start-position)))
	 (nr-columns (max 1 (- end-position start-position 1))))
    (format *error-output* "~a:~a:~a: error: ~a~%" filename line column message)
    (when (= (count #\newline message) 0)
      (let ((lines (split-sequence:split-sequence #\newline file-as-string)))
	(format *error-output* "~a~%" (nth (1- line) lines))
	(format *error-output* "~vt~v,,,'^a~%" column nr-columns "")))))
#+end_src

*** Utility functions

#+begin_src lisp
(defun get-filenames-directory (directory)
  (mapcar #'pathname-name
          (list-directory
           (merge-pathnames
            directory
            (pathname-as-directory (sb-posix:getenv "MCL_ROOT_DIR"))))))
#+end_src



